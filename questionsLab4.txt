Question2:
Användargränssnittet ni utgick från i del A var en ansats till implementation av
Model-View-Controller Pattern, men där gränsdragningen mellan model, view, controller och
applikation inte var något vidare genomtänkt (för att inte säga usel).

- Vilka avvikelser från MVC-idealet kan ni identifiera i det ursprungliga användargränssnittet?
- Vad borde ha gjorts smartare, dummare eller tunnare?
- Vilka av dessa brister åtgärdade ni med er nya design från del 2A? Hur då?
- Vilka brister åtgärdade ni inte?
Rita ett nytt UML-diagram som beskriver en förbättrad design med avseende på MVC.
(är detta inte diagrammet från förra uppgiften?, vad är det som skiljer sig)

Svar:
I det ursprungliga användargränssnittet var det svårt att se var gränsdragningen mellan
model, view, controller och applikation. View hanterade både user input och moveit (rörelser)
vilket borde gjorts av controller. Det var även oklart vad som var model.
Vidare hade view också hand om knapparnas layout och information.
Controller instansierade även bilarna var för sig, vilket borde gjorts av en model.
Controller fungerade även som en mainfunktion vilket inte är optimalt.

Vi åtgärdade detta genom att skapa en ny klass, Factory, som skapar bilarna, som är starkt kopplad
till model. Vi skapade CarMotionManager som tog hand om rörelser av bilarna.
Vi skapade även en ny klass, Buttons, som hanterade knapparnas layout och information.
Vi skapade även en ny klass, Simulator, som fungerade som mainfunktion.
Den nya klassen CarModel skapas även då att skapa nya fordon är en del av modellens ansvar och inte Controllers.
Logiken från main för att skapa fordon och ställa in deras positioner är flyttad till CarModel istället.
