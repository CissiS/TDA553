Question2:
Användargränssnittet ni utgick från i del A var en ansats till implementation av
Model-View-Controller Pattern, men där gränsdragningen mellan model, view, controller och
applikation inte var något vidare genomtänkt (för att inte säga usel).

- Vilka avvikelser från MVC-idealet kan ni identifiera i det ursprungliga användargränssnittet?
- Vad borde ha gjorts smartare, dummare eller tunnare?
- Vilka av dessa brister åtgärdade ni med er nya design från del 2A? Hur då?
- Vilka brister åtgärdade ni inte?
Rita ett nytt UML-diagram som beskriver en förbättrad design med avseende på MVC.
(är detta inte diagrammet från förra uppgiften?, vad är det som skiljer sig)

Svar:
I det ursprungliga användargränssnittet var det svårt att se var gränsdragningen mellan
model, view, controller och applikation. View hanterade både user input och moveit (rörelser)
vilket borde gjorts av controller. Det var även oklart vad som var model.
Vidare hade view också hand om knapparnas layout och information.
Controller instansierade även bilarna var för sig, vilket borde gjorts av en model.
Controller fungerade även som en mainfunktion vilket inte är optimalt.

Vi åtgärdade detta genom att skapa en ny klass, Factory, som skapar bilarna, som är starkt kopplad
till model. Vi skapade CarMotionManager som tog hand om rörelser av bilarna, som i sig fyller syftet som en model har.
Den hanterar domänlogiken kopplat till bilen men har ett namn som tydligt syftar på ändringar av bilens logik och inte bara en bilmodell.
Vi skapade även en ny klass, Buttons, som hanterade knapparnas layout och information.
Vi skapade även en ny klass, Simulator, som fungerade som mainfunktion.
Den nya klassen CarMotionManager skapas även då att skapa nya fordon är en del av modellens ansvar och inte Controllers.
_________________________________________________________________
Question3:
- Observer, Factory Method, State, Composite.
För vart och ett av dessa fyra designmönster, svara på följande frågor:
- Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt?
- Vilka designproblem löste ni genom att använda det?
- Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern?
- Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?


* Factory method:

- Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt?
Ja, detta använder vi i Factory klassen.

- Vilka designproblem löste ni genom att använda det?
Det har gjort så att vi med ett knapptryck kan skapa upp nya bilar och slipper att MVC-modellen ska skapa bilarna.

- Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern?
Inte genom att använda det eftersom vi redan gör det men man hade kunnat lägga till en spinner eller liknande till add knapparna och med hjälp av värdena låta användaren
bestämma vilket typ av bil som läggs till istället för att det är slump.

- Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?
Då vi redan använder det.


* Observer
- Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt?
Vi använder detta oavsiktligt i vår design. Vi har en klass som heter timelistener och actionlistner i CarController som har metoden actionPerformed
för att observera och hantera händelser i gränssnittet.
Detta används i Buttons så när användaren trycker på en knapp som fångar den actionPerformed upp det.

- Vilka designproblem löste ni genom att använda det?
Så man kunde använda sig utav knapparna. Man hanterar användarens interaktioner och uppdatera applikationens tillstånd baserat på dessa interaktioner.

- Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern?
Nej inte för nuvarande.

- Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?
För nuvarande finns det inga mer områden i designen då det behövs.
Det hade eventuellt varit för triviala saker som att få bilen att studsa mot rutan men att använda detta för det hade gjort saker och ting mer
komplicerat än vad det behöver vara,


* State
- Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt?
Ja, genom att ha olika tillstånd för lastbilens flak (uppfällt/nedfällt) kan lastbilen bete sig olika beroende på det aktuella tillståndet.
Exempelvis kan inte lastbilen köra om flaket inte är i rätt position.

- Vilka designproblem löste ni genom att använda det?
Beteendet hos lastbilen kan variera beroende på det aktuella tillståndet hos dess flak och
vi kan enklare anpassa speciella funktioners som bara kan ske i olika tillstånd.
Detta minskar också koddupliceringen eftersom Truck och CarTransport funkar lika i denna aspekt.

- Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern?
Inte för nuvarande. Om det funnits fler objekt som ändrar beteende baserat på deras interna tillstånd hade det kanske varit en lämplig lösning.
Eller om det är större skillnader i dessa tillstånd skulle man också kunna implementera separata klasser för dem.

- Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?
För nuvarande har vi inga fler designproblem som behöver lösas med hjälp av att använda state pattern.
Hade varit lämpligt om vi hade fler objekt som ändrar sitt beteende baserat på deras interna tillstånd.

* Composite
- Finns det något ställe i er design där ni redan använder detta pattern, avsiktligt eller oavsiktligt?
Ja, vi har till exempel ett gemensamt gränssnitt Vehicle som CarTransport och Car implementerar
- Vilka designproblem löste ni genom att använda det?
Vi hanterar både enskilda fordon och sammansättningar av fordon (på CarTransport) på ett enhetligt sätt (move) och möjliggöra rekursiv behandling av fordonshierarkin.
När CarTransport körs kommer alltså även positionerna hos bilarna på CarTransport att uppdateras samtidigt.

- Finns det något ställe där ni kan förbättra er design genom att använda detta design pattern?
Kan inte identifierar några ytterligare områden där det kan tillämpas.

- Vilka designproblem skulle ni lösa genom att använda det? Om inte, varför skulle er design inte förbättras av att använda det?
Om det finns fler saker som båda Car och CarTransport kan göra på ett enhetligt sätt eller andra liknande situationer mellan hierarkierna, kan det vara en indikation på att använda Composite Pattern mer.
kan det vara en indikation på att använda Composite Pattern mer.
